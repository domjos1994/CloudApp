Index: ChatFeature/src/main/java/de/domjos/cloudapp/features/chats/screens/ChatScreen.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package de.domjos.cloudapp.features.chats.screens\n\nimport androidx.compose.foundation.Image\nimport androidx.compose.foundation.background\nimport androidx.compose.foundation.layout.Column\nimport androidx.compose.foundation.layout.Row\nimport androidx.compose.foundation.layout.fillMaxSize\nimport androidx.compose.foundation.layout.fillMaxWidth\nimport androidx.compose.foundation.layout.height\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.material3.MaterialTheme\nimport androidx.compose.material3.Text\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.getValue\nimport androidx.compose.runtime.produceState\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.platform.LocalLifecycleOwner\nimport androidx.compose.ui.res.painterResource\nimport androidx.compose.ui.text.font.FontStyle\nimport androidx.compose.ui.text.font.FontWeight\nimport androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.ui.unit.dp\nimport androidx.hilt.navigation.compose.hiltViewModel\nimport androidx.lifecycle.Lifecycle\nimport androidx.lifecycle.repeatOnLifecycle\nimport de.domjos.cloudapp.features.chats.R\nimport de.domjos.cloudapp.webrtc.model.msg.Message\nimport de.domjos.cloudapp.webrtc.model.room.Room\n\n@Composable\nfun ChatScreen(viewModel: ChatViewModel = hiltViewModel()) {\n    val lifecycle = LocalLifecycleOwner.current.lifecycle\n    val chats by produceState<RoomUiState>(\n        initialValue = RoomUiState.Loading,\n        key1 = lifecycle,\n        key2 = viewModel\n    ) {\n        lifecycle.repeatOnLifecycle(state = Lifecycle.State.STARTED) {\n            viewModel.uiState.collect { value = it }\n        }\n    }\n\n    if (\n        chats is RoomUiState.Success) {\n\n        ChatScreen((chats as RoomUiState.Success).data)\n    }\n}\n\n@Composable\nfun ChatScreen(rooms: List<Room>) {\n    Column(modifier = Modifier.fillMaxSize().padding(1.dp)) {\n\n        rooms.forEach { room -> ChatItem(room)}\n    }\n}\n\n@Composable\nfun ChatItem(room: Room) {\n    Row(\n        verticalAlignment = Alignment.CenterVertically,\n        modifier = Modifier.fillMaxWidth()\n            .background(color = MaterialTheme.colorScheme.primaryContainer)) {\n        Image(painterResource(R.drawable.baseline_person_24), room.name, modifier = Modifier.padding(5.dp))\n        Column {\n            Text(room.displayName, fontWeight= FontWeight.Bold, modifier = Modifier.padding(5.dp))\n            Text(\n                \"${room.lastMessage.actorDisplayName}: ${room.lastMessage.message}\",\n                modifier = Modifier.padding(5.dp),\n                fontStyle = if(room.unreadMessages==0) FontStyle.Normal else FontStyle.Italic,\n                fontWeight = if(room.unreadMessages==0) FontWeight.Normal else FontWeight.Bold\n            )\n        }\n    }\n    Row(modifier = Modifier.fillMaxWidth().height(1.dp)) {}\n}\n\n@Preview(showBackground = true)\n@Composable\nfun ChatScreenPreview() {\n    ChatScreen(listOf(fake(0), fake(1), fake(2)))\n}\n\n@Preview(showBackground = true)\n@Composable\nfun ChatItemPreview() {\n    ChatItem(fake(1))\n}\n\nfun fake(no: Int): Room {\n    val msg =\n        Message(\n            no,\n            no.toString(),\n            no.toString(),\n            no.toString(),\n            \"test$no\",\n            no.toLong(),\n            \"This is a test$no!\"\n        )\n    return Room(\n        no.toLong(),\n        \"token$no\",\n        no,\n        \"Chat$no\",\n        \"Group-Chat$no\",\n        \"description$no\",\n        1,\n        no,\n        \"dfsklghkgfd\",\n        msg\n    )\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ChatFeature/src/main/java/de/domjos/cloudapp/features/chats/screens/ChatScreen.kt b/ChatFeature/src/main/java/de/domjos/cloudapp/features/chats/screens/ChatScreen.kt
--- a/ChatFeature/src/main/java/de/domjos/cloudapp/features/chats/screens/ChatScreen.kt	(revision bdfd94d2a99956fdc53552f5f87132c89d65188e)
+++ b/ChatFeature/src/main/java/de/domjos/cloudapp/features/chats/screens/ChatScreen.kt	(date 1710660644491)
@@ -1,38 +1,32 @@
 package de.domjos.cloudapp.features.chats.screens
 
-import androidx.compose.foundation.Image
 import androidx.compose.foundation.background
-import androidx.compose.foundation.layout.Column
 import androidx.compose.foundation.layout.Row
-import androidx.compose.foundation.layout.fillMaxSize
-import androidx.compose.foundation.layout.fillMaxWidth
-import androidx.compose.foundation.layout.height
-import androidx.compose.foundation.layout.padding
-import androidx.compose.material3.MaterialTheme
 import androidx.compose.material3.Text
 import androidx.compose.runtime.Composable
 import androidx.compose.runtime.getValue
 import androidx.compose.runtime.produceState
-import androidx.compose.ui.Alignment
 import androidx.compose.ui.Modifier
+import androidx.compose.ui.graphics.Color
+import androidx.compose.ui.platform.LocalContext
 import androidx.compose.ui.platform.LocalLifecycleOwner
-import androidx.compose.ui.res.painterResource
-import androidx.compose.ui.text.font.FontStyle
-import androidx.compose.ui.text.font.FontWeight
 import androidx.compose.ui.tooling.preview.Preview
-import androidx.compose.ui.unit.dp
 import androidx.hilt.navigation.compose.hiltViewModel
 import androidx.lifecycle.Lifecycle
 import androidx.lifecycle.repeatOnLifecycle
-import de.domjos.cloudapp.features.chats.R
+import androidx.navigation.NavArgument
+import androidx.navigation.compose.rememberNavController
 import de.domjos.cloudapp.webrtc.model.msg.Message
-import de.domjos.cloudapp.webrtc.model.room.Room
+
 
 @Composable
-fun ChatScreen(viewModel: ChatViewModel = hiltViewModel()) {
+fun ChatScreen(
+    viewModel: ChatViewModel = hiltViewModel(),
+    lookIntoFuture: Int,
+    token: String) {
     val lifecycle = LocalLifecycleOwner.current.lifecycle
-    val chats by produceState<RoomUiState>(
-        initialValue = RoomUiState.Loading,
+    val chats by produceState<ChatUiState>(
+        initialValue = ChatUiState.Loading,
         key1 = lifecycle,
         key2 = viewModel
     ) {
@@ -40,75 +34,32 @@
             viewModel.uiState.collect { value = it }
         }
     }
+    viewModel.initChats(lookIntoFuture, token)
 
     if (
-        chats is RoomUiState.Success) {
+        chats is ChatUiState.Success) {
 
-        ChatScreen((chats as RoomUiState.Success).data)
-    }
-}
+        ChatScreen(
+            onSaveClick = {},
+            onDeleteClick = {},
+            messages = (chats as ChatUiState.Success).data)
 
-@Composable
-fun ChatScreen(rooms: List<Room>) {
-    Column(modifier = Modifier.fillMaxSize().padding(1.dp)) {
-
-        rooms.forEach { room -> ChatItem(room)}
     }
 }
 
 @Composable
-fun ChatItem(room: Room) {
-    Row(
-        verticalAlignment = Alignment.CenterVertically,
-        modifier = Modifier.fillMaxWidth()
-            .background(color = MaterialTheme.colorScheme.primaryContainer)) {
-        Image(painterResource(R.drawable.baseline_person_24), room.name, modifier = Modifier.padding(5.dp))
-        Column {
-            Text(room.displayName, fontWeight= FontWeight.Bold, modifier = Modifier.padding(5.dp))
-            Text(
-                "${room.lastMessage.actorDisplayName}: ${room.lastMessage.message}",
-                modifier = Modifier.padding(5.dp),
-                fontStyle = if(room.unreadMessages==0) FontStyle.Normal else FontStyle.Italic,
-                fontWeight = if(room.unreadMessages==0) FontWeight.Normal else FontWeight.Bold
-            )
-        }
+fun ChatScreen(
+    onSaveClick: (Message) -> Unit,
+    onDeleteClick: (Message) -> Unit,
+    messages: List<Message>) {
+
+    Row(Modifier.background(color = Color.Black)) {
+        Text("Test")
     }
-    Row(modifier = Modifier.fillMaxWidth().height(1.dp)) {}
 }
 
-@Preview(showBackground = true)
+@Preview
 @Composable
-fun ChatScreenPreview() {
-    ChatScreen(listOf(fake(0), fake(1), fake(2)))
-}
-
-@Preview(showBackground = true)
-@Composable
-fun ChatItemPreview() {
-    ChatItem(fake(1))
-}
-
-fun fake(no: Int): Room {
-    val msg =
-        Message(
-            no,
-            no.toString(),
-            no.toString(),
-            no.toString(),
-            "test$no",
-            no.toLong(),
-            "This is a test$no!"
-        )
-    return Room(
-        no.toLong(),
-        "token$no",
-        no,
-        "Chat$no",
-        "Group-Chat$no",
-        "description$no",
-        1,
-        no,
-        "dfsklghkgfd",
-        msg
-    )
+fun ScreenPreview() {
+    ChatScreen({},{}, listOf())
 }
\ No newline at end of file
Index: ChatFeature/src/main/java/de/domjos/cloudapp/features/chats/screens/ChatViewModel.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package de.domjos.cloudapp.features.chats.screens\n\nimport androidx.lifecycle.ViewModel\nimport androidx.lifecycle.viewModelScope\nimport dagger.hilt.android.lifecycle.HiltViewModel\nimport de.domjos.cloudapp.data.repository.RoomRepository\nimport de.domjos.cloudapp.webrtc.model.room.Room\nimport kotlinx.coroutines.flow.SharingStarted\nimport kotlinx.coroutines.flow.StateFlow\nimport kotlinx.coroutines.flow.catch\nimport kotlinx.coroutines.flow.map\nimport kotlinx.coroutines.flow.stateIn\nimport javax.inject.Inject\n\n@HiltViewModel\nclass ChatViewModel @Inject constructor(\n    private val roomRepository: RoomRepository\n) : ViewModel() {\n    var uiState: StateFlow<RoomUiState> = roomRepository\n        .rooms.map<List<Room>, RoomUiState> {RoomUiState.Success(data = it)}\n        .catch { emit(RoomUiState.Error(it)) }\n        .stateIn(viewModelScope, SharingStarted.WhileSubscribed(5000), RoomUiState.Loading)\n\n}\n\nsealed interface RoomUiState {\n    data object Loading : RoomUiState\n    data class Error(val throwable: Throwable) : RoomUiState\n    data class Success(val data: List<Room>) : RoomUiState\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ChatFeature/src/main/java/de/domjos/cloudapp/features/chats/screens/ChatViewModel.kt b/ChatFeature/src/main/java/de/domjos/cloudapp/features/chats/screens/ChatViewModel.kt
--- a/ChatFeature/src/main/java/de/domjos/cloudapp/features/chats/screens/ChatViewModel.kt	(revision bdfd94d2a99956fdc53552f5f87132c89d65188e)
+++ b/ChatFeature/src/main/java/de/domjos/cloudapp/features/chats/screens/ChatViewModel.kt	(date 1710660420412)
@@ -1,30 +1,41 @@
 package de.domjos.cloudapp.features.chats.screens
 
 import androidx.lifecycle.ViewModel
+import androidx.lifecycle.ViewModelProvider
 import androidx.lifecycle.viewModelScope
+import dagger.assisted.Assisted
+import dagger.assisted.AssistedInject
 import dagger.hilt.android.lifecycle.HiltViewModel
-import de.domjos.cloudapp.data.repository.RoomRepository
-import de.domjos.cloudapp.webrtc.model.room.Room
+import de.domjos.cloudapp.data.repository.ChatRepository
+import de.domjos.cloudapp.webrtc.model.msg.Message
+import kotlinx.coroutines.Dispatchers
 import kotlinx.coroutines.flow.SharingStarted
 import kotlinx.coroutines.flow.StateFlow
 import kotlinx.coroutines.flow.catch
 import kotlinx.coroutines.flow.map
 import kotlinx.coroutines.flow.stateIn
+import kotlinx.coroutines.plus
 import javax.inject.Inject
 
 @HiltViewModel
 class ChatViewModel @Inject constructor(
-    private val roomRepository: RoomRepository
-) : ViewModel() {
-    var uiState: StateFlow<RoomUiState> = roomRepository
-        .rooms.map<List<Room>, RoomUiState> {RoomUiState.Success(data = it)}
-        .catch { emit(RoomUiState.Error(it)) }
-        .stateIn(viewModelScope, SharingStarted.WhileSubscribed(5000), RoomUiState.Loading)
+    private val chatRepository: ChatRepository,
+    savedStateHandle: SavedStateHandle
+    ) : ViewModel() {
+    var uiState: StateFlow<ChatUiState> = chatRepository.initChats()
+        .map<List<Message>, ChatUiState> {ChatUiState.Success(data = it)}
+        .catch { emit(ChatUiState.Error(it)) }
+        .stateIn(viewModelScope.plus(Dispatchers.IO), SharingStarted.WhileSubscribed(5000), ChatUiState.Loading)
 
+    fun initChats(lookIntoFuture: Int, token: String) {
+        chatRepository.lookIntoFuture = lookIntoFuture
+        chatRepository.token = token
+    }
 }
 
-sealed interface RoomUiState {
-    data object Loading : RoomUiState
-    data class Error(val throwable: Throwable) : RoomUiState
-    data class Success(val data: List<Room>) : RoomUiState
+
+sealed interface ChatUiState {
+    data object Loading : ChatUiState
+    data class Error(val throwable: Throwable) : ChatUiState
+    data class Success(val data: List<Message>) : ChatUiState
 }
\ No newline at end of file
Index: ChatFeature/src/main/res/drawable/baseline_person_24.xml
===================================================================
diff --git a/ChatFeature/src/main/res/drawable/baseline_person_24.xml b/ChatFeature/src/main/res/drawable/baseline_person_24.xml
deleted file mode 100644
--- a/ChatFeature/src/main/res/drawable/baseline_person_24.xml	(revision bdfd94d2a99956fdc53552f5f87132c89d65188e)
+++ /dev/null	(revision bdfd94d2a99956fdc53552f5f87132c89d65188e)
@@ -1,5 +0,0 @@
-<vector xmlns:android="http://schemas.android.com/apk/res/android" android:height="24dp" android:tint="#000000" android:viewportHeight="24" android:viewportWidth="24" android:width="24dp">
-      
-    <path android:fillColor="@android:color/white" android:pathData="M12,12c2.21,0 4,-1.79 4,-4s-1.79,-4 -4,-4 -4,1.79 -4,4 1.79,4 4,4zM12,14c-2.67,0 -8,1.34 -8,4v2h16v-2c0,-2.66 -5.33,-4 -8,-4z"/>
-    
-</vector>
Index: AppBasics/src/main/res/values/strings.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\n<resources>\n    <string name=\"notifications\">Notifications</string>\n\n    <string name=\"calendars\">Calendars</string>\n\n    <string name=\"contacts\">Contacts</string>\n\n    <string name=\"data\">Data</string>\n\n    <string name=\"chats\">Chats</string>\n\n    <string name=\"login\">Login</string>\n    <string name=\"login.authentications\">Authentications</string>\n    <string name=\"login.title\">Title</string>\n    <string name=\"login.url\">URL</string>\n    <string name=\"login.user\">Username</string>\n    <string name=\"login.pwd\">Password</string>\n    <string name=\"login.description\">Description</string>\n    <string name=\"login.close\">Close</string>\n    <string name=\"login.add\">Add</string>\n    <string name=\"login.delete\">Delete</string>\n\n    <string name=\"validation.notEmpty\">Field shouldn\\'t be empty!</string>\n    <string name=\"validation.notEmpty.min\">Field should be longer than %d characters!</string>\n    <string name=\"validation.notEmpty.max\">Field should be less than %d characters!</string>\n    <string name=\"validation.notEmpty.min_max\">Field should be between %d and %d characters!</string>\n</resources>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AppBasics/src/main/res/values/strings.xml b/AppBasics/src/main/res/values/strings.xml
--- a/AppBasics/src/main/res/values/strings.xml	(revision bdfd94d2a99956fdc53552f5f87132c89d65188e)
+++ b/AppBasics/src/main/res/values/strings.xml	(date 1710577206018)
@@ -9,6 +9,10 @@
     <string name="data">Data</string>
 
     <string name="chats">Chats</string>
+    <string name="chats_room">Rooms</string>
+    <string name="chats_rooms_type">Type</string>
+    <string name="chats_rooms_name">Name</string>
+    <string name="chats_rooms_description">Description</string>
 
     <string name="login">Login</string>
     <string name="login.authentications">Authentications</string>
Index: WebRTC/src/main/java/de/domjos/cloudapp/webrtc/model/msg/OCS.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/WebRTC/src/main/java/de/domjos/cloudapp/webrtc/model/msg/OCS.kt b/WebRTC/src/main/java/de/domjos/cloudapp/webrtc/model/msg/OCS.kt
new file mode 100644
--- /dev/null	(date 1710581874820)
+++ b/WebRTC/src/main/java/de/domjos/cloudapp/webrtc/model/msg/OCS.kt	(date 1710581874820)
@@ -0,0 +1,31 @@
+package de.domjos.cloudapp.webrtc.model.msg
+
+import de.domjos.cloudapp.webrtc.model.ocs.Meta
+import de.domjos.cloudapp.webrtc.model.msg.Message
+import kotlinx.serialization.Serializable
+
+@Serializable
+class OCS(val meta: Meta, val data: Array<Message>) {
+    override fun equals(other: Any?): Boolean {
+        if (this === other) return true
+        if (javaClass != other?.javaClass) return false
+        if (!super.equals(other)) return false
+
+        other as OCS
+
+        if (meta != other.meta) return false
+        if (!data.contentEquals(other.data)) return false
+
+        return true
+    }
+
+    override fun hashCode(): Int {
+        var result = super.hashCode()
+        result = 31 * result + meta.hashCode()
+        result = 31 * result + data.contentHashCode()
+        return result
+    }
+}
+
+@Serializable
+data class OCSObject(val ocs: OCS)
\ No newline at end of file
Index: data/src/main/java/de/domjos/cloudapp/data/repository/RoomRepository.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package de.domjos.cloudapp.data.repository\n\nimport de.domjos.cloudapp.database.dao.AuthenticationDAO\nimport de.domjos.cloudapp.database.model.Authentication\nimport de.domjos.cloudapp.webrtc.model.room.Room\nimport de.domjos.cloudapp.webrtc.requests.RoomRequest\nimport kotlinx.coroutines.flow.Flow\nimport kotlinx.coroutines.flow.asFlow\nimport javax.inject.Inject\n\ninterface RoomRepository {\n    val rooms: Flow<List<Room>>\n\n}\n\nclass DefaultRoomRepository @Inject constructor(\n    authenticationDAO: AuthenticationDAO\n) : RoomRepository {\n    override var rooms: Flow<List<Room>> =\n        RoomRequest(authenticationDAO.getSelectedItem()).getRooms()\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/data/src/main/java/de/domjos/cloudapp/data/repository/RoomRepository.kt b/data/src/main/java/de/domjos/cloudapp/data/repository/RoomRepository.kt
--- a/data/src/main/java/de/domjos/cloudapp/data/repository/RoomRepository.kt	(revision bdfd94d2a99956fdc53552f5f87132c89d65188e)
+++ b/data/src/main/java/de/domjos/cloudapp/data/repository/RoomRepository.kt	(date 1710582152108)
@@ -1,21 +1,45 @@
 package de.domjos.cloudapp.data.repository
 
 import de.domjos.cloudapp.database.dao.AuthenticationDAO
-import de.domjos.cloudapp.database.model.Authentication
 import de.domjos.cloudapp.webrtc.model.room.Room
+import de.domjos.cloudapp.webrtc.model.room.RoomInput
 import de.domjos.cloudapp.webrtc.requests.RoomRequest
 import kotlinx.coroutines.flow.Flow
-import kotlinx.coroutines.flow.asFlow
 import javax.inject.Inject
 
 interface RoomRepository {
     val rooms: Flow<List<Room>>
-
+    val request: RoomRequest
+    suspend fun insertRoom(input: RoomInput)
+    suspend fun updateRoom(token: String, name: String?, description: String?)
+    suspend fun deleteRoom(token: String)
 }
 
 class DefaultRoomRepository @Inject constructor(
-    authenticationDAO: AuthenticationDAO
+    private val authenticationDAO: AuthenticationDAO
 ) : RoomRepository {
+    override val request: RoomRequest
+        get() = RoomRequest(authenticationDAO.getSelectedItem())
     override var rooms: Flow<List<Room>> =
-        RoomRequest(authenticationDAO.getSelectedItem()).getRooms()
+        request.getRooms()
+
+    @Throws(Exception::class)
+    override suspend fun insertRoom(input: RoomInput) {
+        request.addRoom(input)
+    }
+
+    @Throws(Exception::class)
+    override suspend fun updateRoom(token: String, name: String?, description: String?) {
+        if(name != null) {
+            request.renameRoom(token, name)
+        }
+        if(description != null) {
+            request.updateDescription(token, description)
+        }
+    }
+
+    @Throws(Exception::class)
+    override suspend fun deleteRoom(token: String) {
+        request.deleteRoom(token)
+    }
 }
\ No newline at end of file
Index: WebRTC/src/main/java/de/domjos/cloudapp/webrtc/requests/RoomRequest.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package de.domjos.cloudapp.webrtc.requests\n\nimport de.domjos.cloudapp.database.model.Authentication\nimport de.domjos.cloudapp.webrtc.model.room.OCS\nimport de.domjos.cloudapp.webrtc.model.room.OCSObject\nimport de.domjos.cloudapp.webrtc.model.room.Room\nimport de.domjos.cloudapp.webrtc.model.room.RoomInput\nimport kotlinx.coroutines.flow.Flow\nimport kotlinx.coroutines.flow.flow\nimport kotlinx.serialization.encodeToString\nimport okhttp3.Callback\n\n\nclass RoomRequest(authentication: Authentication?) : BasicRequest(authentication, \"/ocs/v2.php/apps/spreed/api/v4/\") {\n\n\n\n    @Throws(Exception::class)\n    fun getRooms(): Flow<List<Room>> {\n        val request = super.buildRequest(\"room?format=json\", \"get\", null)\n\n\n\n        return flow {\n            if(request!=null) {\n                client.newCall(request).execute().use { response ->\n                    val content = response.body!!.string()\n                    val ocs =  super.json.decodeFromString<OCSObject>(content)\n                    if(ocs.ocs.meta.statuscode==200) {\n                        emit(ocs.ocs.data.toList())\n                    } else {\n                        throw Exception(ocs.ocs.meta.message)\n                    }\n                }\n            } else {\n                emit(listOf())\n            }\n        }\n    }\n\n    @Throws(Exception::class)\n    fun putRoom(input: RoomInput) {\n        val request = super.buildRequest(\"room\", \"post\", super.json.encodeToString(input))\n\n        client.newCall(request!!).execute().use { response ->\n            val content = response.code\n            if(content != 200) {\n                throw Exception(response.message)\n            }\n        }\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/WebRTC/src/main/java/de/domjos/cloudapp/webrtc/requests/RoomRequest.kt b/WebRTC/src/main/java/de/domjos/cloudapp/webrtc/requests/RoomRequest.kt
--- a/WebRTC/src/main/java/de/domjos/cloudapp/webrtc/requests/RoomRequest.kt	(revision bdfd94d2a99956fdc53552f5f87132c89d65188e)
+++ b/WebRTC/src/main/java/de/domjos/cloudapp/webrtc/requests/RoomRequest.kt	(date 1710575481522)
@@ -5,6 +5,7 @@
 import de.domjos.cloudapp.webrtc.model.room.OCSObject
 import de.domjos.cloudapp.webrtc.model.room.Room
 import de.domjos.cloudapp.webrtc.model.room.RoomInput
+import kotlinx.coroutines.delay
 import kotlinx.coroutines.flow.Flow
 import kotlinx.coroutines.flow.flow
 import kotlinx.serialization.encodeToString
@@ -22,31 +23,86 @@
 
 
         return flow {
-            if(request!=null) {
-                client.newCall(request).execute().use { response ->
-                    val content = response.body!!.string()
-                    val ocs =  super.json.decodeFromString<OCSObject>(content)
-                    if(ocs.ocs.meta.statuscode==200) {
-                        emit(ocs.ocs.data.toList())
-                    } else {
-                        throw Exception(ocs.ocs.meta.message)
-                    }
-                }
-            } else {
-                emit(listOf())
+            while(true) {
+                if(request!=null) {
+                    client.newCall(request).execute().use { response ->
+                        val content = response.body!!.string()
+                        val ocs =  super.json.decodeFromString<OCSObject>(content)
+                        if(ocs.ocs.meta.statuscode==200) {
+                            emit(ocs.ocs.data.toList())
+                        } else {
+                            throw Exception(ocs.ocs.meta.message)
+                        }
+                    }
+                } else {
+                    emit(listOf())
+                }
+                delay(20000L)
             }
         }
     }
 
     @Throws(Exception::class)
-    fun putRoom(input: RoomInput) {
+    fun addRoom(input: RoomInput) {
         val request = super.buildRequest("room", "post", super.json.encodeToString(input))
 
-        client.newCall(request!!).execute().use { response ->
-            val content = response.code
-            if(content != 200) {
-                throw Exception(response.message)
+        if(request != null) {
+            client.newCall(request).execute().use { response ->
+                val content = response.code
+                if(content != 200) {
+                    throw Exception(response.message)
+                }
+            }
+        } else {
+            throw Exception("Something went wrong!")
+        }
+    }
+
+    @Throws(Exception::class)
+    fun renameRoom(token: String, name: String) {
+        val request = super.buildRequest("room/$token?roomName=$name", "put", null)
+
+        if(request != null) {
+            client.newCall(request).execute().use { response ->
+                val content = response.code
+                if(content != 200) {
+                    throw Exception(response.message)
+                }
+            }
+        } else {
+            throw Exception("Something went wrong!")
+        }
+    }
+
+    @Throws(Exception::class)
+    fun updateDescription(token: String, description: String) {
+        val request = super.buildRequest("room/$token/description?description=$description", "put", null)
+
+        if(request != null) {
+            client.newCall(request).execute().use { response ->
+                val content = response.code
+                if(content != 200) {
+                    throw Exception(response.message)
+                }
+            }
+        } else {
+            throw Exception("Something went wrong!")
+        }
+    }
+
+    @Throws(Exception::class)
+    fun deleteRoom(token: String) {
+        val request = super.buildRequest("room/$token", "delete", null)
+
+        if(request != null) {
+            client.newCall(request).execute().use { response ->
+                val content = response.code
+                if(content != 200) {
+                    throw Exception(response.message)
+                }
             }
+        } else {
+            throw Exception("Something went wrong!")
         }
     }
 }
\ No newline at end of file
Index: ChatFeature/src/main/java/de/domjos/cloudapp/features/chats/screens/RoomViewModel.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ChatFeature/src/main/java/de/domjos/cloudapp/features/chats/screens/RoomViewModel.kt b/ChatFeature/src/main/java/de/domjos/cloudapp/features/chats/screens/RoomViewModel.kt
new file mode 100644
--- /dev/null	(date 1710583021553)
+++ b/ChatFeature/src/main/java/de/domjos/cloudapp/features/chats/screens/RoomViewModel.kt	(date 1710583021553)
@@ -0,0 +1,60 @@
+package de.domjos.cloudapp.features.chats.screens
+
+import androidx.lifecycle.ViewModel
+import androidx.lifecycle.viewModelScope
+import dagger.hilt.android.lifecycle.HiltViewModel
+import de.domjos.cloudapp.data.repository.RoomRepository
+import de.domjos.cloudapp.webrtc.model.room.Room
+import de.domjos.cloudapp.webrtc.model.room.RoomInput
+import kotlinx.coroutines.Dispatchers
+import kotlinx.coroutines.flow.SharingStarted
+import kotlinx.coroutines.flow.StateFlow
+import kotlinx.coroutines.flow.catch
+import kotlinx.coroutines.flow.map
+import kotlinx.coroutines.flow.stateIn
+import kotlinx.coroutines.launch
+import kotlinx.coroutines.plus
+import javax.inject.Inject
+
+@HiltViewModel
+class RoomViewModel @Inject constructor(
+    private val roomRepository: RoomRepository
+) : ViewModel() {
+    var uiState: StateFlow<RoomUiState> = roomRepository
+        .rooms.map<List<Room>, RoomUiState> {RoomUiState.Success(data = it)}
+        .catch { emit(RoomUiState.Error(it)) }
+        .stateIn(viewModelScope.plus(Dispatchers.IO), SharingStarted.WhileSubscribed(5000), RoomUiState.Loading)
+
+    @Throws(Exception::class)
+    fun insertRoom(room: Room) {
+        viewModelScope.launch {
+            val roomInput = RoomInput("", room.type, room.displayName, room.description)
+
+            roomRepository.insertRoom(roomInput)
+        }
+    }
+
+    @Throws(Exception::class)
+    fun updateRoom(room: Room) {
+        viewModelScope.launch {
+            roomRepository.updateRoom(
+                room.token,
+                room.displayName,
+                room.description
+            )
+        }
+    }
+
+    @Throws(Exception::class)
+    fun deleteRoom(room: Room) {
+        viewModelScope.launch {
+            roomRepository.deleteRoom(room.token)
+        }
+    }
+}
+
+sealed interface RoomUiState {
+    data object Loading : RoomUiState
+    data class Error(val throwable: Throwable) : RoomUiState
+    data class Success(val data: List<Room>) : RoomUiState
+}
\ No newline at end of file
Index: data/src/main/java/de/domjos/cloudapp/data/repository/ChatRepository.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/data/src/main/java/de/domjos/cloudapp/data/repository/ChatRepository.kt b/data/src/main/java/de/domjos/cloudapp/data/repository/ChatRepository.kt
new file mode 100644
--- /dev/null	(date 1710596244748)
+++ b/data/src/main/java/de/domjos/cloudapp/data/repository/ChatRepository.kt	(date 1710596244748)
@@ -0,0 +1,30 @@
+package de.domjos.cloudapp.data.repository
+
+import de.domjos.cloudapp.database.dao.AuthenticationDAO
+import de.domjos.cloudapp.webrtc.model.msg.Message
+import de.domjos.cloudapp.webrtc.requests.ChatRequest
+import kotlinx.coroutines.flow.Flow
+import javax.inject.Inject
+
+interface ChatRepository {
+    val request: ChatRequest
+    var lookIntoFuture: Int
+    var token: String
+
+    fun initChats(): Flow<List<Message>>
+}
+
+class DefaultChatRepository @Inject constructor(
+    private val authenticationDAO: AuthenticationDAO
+) : ChatRepository {
+    override val request: ChatRequest
+        get() = ChatRequest(authenticationDAO.getSelectedItem())
+    override var lookIntoFuture: Int = 0
+    override var token: String = ""
+
+    override fun initChats(): Flow<List<Message>> {
+        return request.getChats(lookIntoFuture, token)
+    }
+
+
+}
\ No newline at end of file
Index: WebRTC/src/main/java/de/domjos/cloudapp/webrtc/model/msg/Message.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package de.domjos.cloudapp.webrtc.model.msg\n\nimport kotlinx.serialization.Serializable\n\n@Serializable\ndata class Message(var id: Int, var token: String, var actorType: String, var actorId: String, var actorDisplayName: String, var timestamp: Long, var message: String) {\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/WebRTC/src/main/java/de/domjos/cloudapp/webrtc/model/msg/Message.kt b/WebRTC/src/main/java/de/domjos/cloudapp/webrtc/model/msg/Message.kt
--- a/WebRTC/src/main/java/de/domjos/cloudapp/webrtc/model/msg/Message.kt	(revision bdfd94d2a99956fdc53552f5f87132c89d65188e)
+++ b/WebRTC/src/main/java/de/domjos/cloudapp/webrtc/model/msg/Message.kt	(date 1710510591609)
@@ -4,4 +4,31 @@
 
 @Serializable
 data class Message(var id: Int, var token: String, var actorType: String, var actorId: String, var actorDisplayName: String, var timestamp: Long, var message: String) {
+    override fun equals(other: Any?): Boolean {
+        if (this === other) return true
+        if (javaClass != other?.javaClass) return false
+
+        other as Message
+
+        if (id != other.id) return false
+        if (token != other.token) return false
+        if (actorType != other.actorType) return false
+        if (actorId != other.actorId) return false
+        if (actorDisplayName != other.actorDisplayName) return false
+        if (timestamp != other.timestamp) return false
+        if (message != other.message) return false
+
+        return true
+    }
+
+    override fun hashCode(): Int {
+        var result = id
+        result = 31 * result + token.hashCode()
+        result = 31 * result + actorType.hashCode()
+        result = 31 * result + actorId.hashCode()
+        result = 31 * result + actorDisplayName.hashCode()
+        result = 31 * result + timestamp.hashCode()
+        result = 31 * result + message.hashCode()
+        return result
+    }
 }
\ No newline at end of file
Index: data/src/main/java/de/domjos/cloudapp/data/di/DataModule.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package de.domjos.cloudapp.data.di\n\nimport dagger.Binds\nimport dagger.Module\nimport dagger.hilt.InstallIn\nimport dagger.hilt.components.SingletonComponent\nimport de.domjos.cloudapp.data.repository.AuthenticationRepository\nimport de.domjos.cloudapp.data.repository.DefaultAuthenticationRepository\nimport de.domjos.cloudapp.data.repository.DefaultRoomRepository\nimport de.domjos.cloudapp.data.repository.RoomRepository\nimport javax.inject.Singleton\n\n@Module\n@InstallIn(SingletonComponent::class)\ninterface DataModule {\n\n    @Singleton\n    @Binds\n    fun bindsAuthenticationRepository(\n        authenticationRepository: DefaultAuthenticationRepository\n    ): AuthenticationRepository\n\n    @Singleton\n    @Binds\n    fun bindsRoomRepository(\n        roomRepository: DefaultRoomRepository\n    ): RoomRepository\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/data/src/main/java/de/domjos/cloudapp/data/di/DataModule.kt b/data/src/main/java/de/domjos/cloudapp/data/di/DataModule.kt
--- a/data/src/main/java/de/domjos/cloudapp/data/di/DataModule.kt	(revision bdfd94d2a99956fdc53552f5f87132c89d65188e)
+++ b/data/src/main/java/de/domjos/cloudapp/data/di/DataModule.kt	(date 1710609558946)
@@ -5,7 +5,9 @@
 import dagger.hilt.InstallIn
 import dagger.hilt.components.SingletonComponent
 import de.domjos.cloudapp.data.repository.AuthenticationRepository
+import de.domjos.cloudapp.data.repository.ChatRepository
 import de.domjos.cloudapp.data.repository.DefaultAuthenticationRepository
+import de.domjos.cloudapp.data.repository.DefaultChatRepository
 import de.domjos.cloudapp.data.repository.DefaultRoomRepository
 import de.domjos.cloudapp.data.repository.RoomRepository
 import javax.inject.Singleton
@@ -25,4 +27,10 @@
     fun bindsRoomRepository(
         roomRepository: DefaultRoomRepository
     ): RoomRepository
+
+    @Singleton
+    @Binds
+    fun bindsChatRepository(
+        chatRepository: DefaultChatRepository
+    ): ChatRepository
 }
\ No newline at end of file
Index: WebRTC/src/main/java/de/domjos/cloudapp/webrtc/requests/ChatRequest.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/WebRTC/src/main/java/de/domjos/cloudapp/webrtc/requests/ChatRequest.kt b/WebRTC/src/main/java/de/domjos/cloudapp/webrtc/requests/ChatRequest.kt
new file mode 100644
--- /dev/null	(date 1710581874904)
+++ b/WebRTC/src/main/java/de/domjos/cloudapp/webrtc/requests/ChatRequest.kt	(date 1710581874904)
@@ -0,0 +1,35 @@
+package de.domjos.cloudapp.webrtc.requests
+
+import de.domjos.cloudapp.database.model.Authentication
+import de.domjos.cloudapp.webrtc.model.msg.Message
+import de.domjos.cloudapp.webrtc.model.msg.OCSObject
+import kotlinx.coroutines.delay
+import kotlinx.coroutines.flow.Flow
+import kotlinx.coroutines.flow.flow
+
+class ChatRequest(authentication: Authentication?) : BasicRequest(authentication, "/ocs/v2.php/apps/spreed/api/v1/") {
+
+    @Throws(Exception::class)
+    fun getChats(lookIntoFuture: Int = 0, token: String): Flow<List<Message>> {
+        val request = super.buildRequest("chat/$token?lookIntoFuture=$lookIntoFuture", "get", null)
+
+        return flow {
+            while(true) {
+                if(request!=null) {
+                    client.newCall(request).execute().use { response ->
+                        val content = response.body!!.string()
+                        val ocs =  super.json.decodeFromString<OCSObject>(content)
+                        if(ocs.ocs.meta.statuscode==200) {
+                            emit(ocs.ocs.data.toList())
+                        } else {
+                            throw Exception(ocs.ocs.meta.message)
+                        }
+                    }
+                } else {
+                    emit(listOf())
+                }
+                delay(20000L)
+            }
+        }
+    }
+}
\ No newline at end of file
Index: Database/src/androidTest/java/de/domjos/cloudapp/database/dao/AuthenticationDaoTest.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package de.domjos.cloudapp.database.dao\n\nimport androidx.test.platform.app.InstrumentationRegistry\nimport androidx.test.ext.junit.runners.AndroidJUnit4\nimport de.domjos.cloudapp.database.BaseTest\nimport de.domjos.cloudapp.database.model.Authentication\n\nimport org.junit.Test\nimport org.junit.runner.RunWith\n\nimport org.junit.Assert.*\nimport org.junit.Before\n\n/**\n * Instrumented test, which will execute on an Android device.\n *\n * See [testing documentation](http://d.android.com/tools/testing).\n */\n@RunWith(AndroidJUnit4::class)\nclass AuthenticationDaoTest : BaseTest() {\n    private lateinit var authenticationDAO: AuthenticationDAO\n\n    @Before\n    fun initClass() {\n        authenticationDAO = super.db.authenticationDao()\n    }\n\n    @Test\n    fun testCreation() {\n        val auth = Authentication(0, \"test\", \"https://test.de\", \"test\", \"test\",null,null)\n\n        var items = authenticationDAO.getAll()\n        assertEquals(0, items.size)\n\n        val id = authenticationDAO.insertAuthentication(auth)\n        assertNotEquals(0, id)\n\n        items = authenticationDAO.getAll()\n        assertEquals(1, items.size)\n\n        auth.id = id\n        authenticationDAO.deleteAuthentication(auth)\n        items = authenticationDAO.getAll()\n        assertEquals(0, items.size)\n    }\n\n    @Test\n    fun testUpdate() {\n        val auth = Authentication(0, \"test\", \"https://test.de\", \"test\", \"test\",null,null)\n\n        var items = authenticationDAO.getAll()\n        assertEquals(0, items.size)\n\n        val id = authenticationDAO.insertAuthentication(auth)\n        assertNotEquals(0, id)\n\n        var item = authenticationDAO.getItemByTitle(\"test\")\n        assertNotNull(item)\n        item.title = \"test2\"\n        authenticationDAO.updateAuthentication(item)\n        item = authenticationDAO.getItemByTitle(\"test2\")\n        assertNotNull(item)\n\n        authenticationDAO.deleteAuthentication(item)\n        items = authenticationDAO.getAll()\n        assertEquals(0, items.size)\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Database/src/androidTest/java/de/domjos/cloudapp/database/dao/AuthenticationDaoTest.kt b/Database/src/androidTest/java/de/domjos/cloudapp/database/dao/AuthenticationDaoTest.kt
--- a/Database/src/androidTest/java/de/domjos/cloudapp/database/dao/AuthenticationDaoTest.kt	(revision bdfd94d2a99956fdc53552f5f87132c89d65188e)
+++ b/Database/src/androidTest/java/de/domjos/cloudapp/database/dao/AuthenticationDaoTest.kt	(date 1710508357784)
@@ -1,9 +1,10 @@
 package de.domjos.cloudapp.database.dao
 
-import androidx.test.platform.app.InstrumentationRegistry
 import androidx.test.ext.junit.runners.AndroidJUnit4
 import de.domjos.cloudapp.database.BaseTest
 import de.domjos.cloudapp.database.model.Authentication
+import kotlinx.coroutines.awaitAll
+import kotlinx.coroutines.flow.toList
 
 import org.junit.Test
 import org.junit.runner.RunWith
@@ -26,29 +27,29 @@
     }
 
     @Test
-    fun testCreation() {
-        val auth = Authentication(0, "test", "https://test.de", "test", "test",null,null)
+    suspend fun testCreation() {
+        val auth = Authentication(0, "test", "https://test.de", "test", "test",false,null, null)
 
-        var items = authenticationDAO.getAll()
+        var items = authenticationDAO.getAll().toList()
         assertEquals(0, items.size)
 
         val id = authenticationDAO.insertAuthentication(auth)
         assertNotEquals(0, id)
 
-        items = authenticationDAO.getAll()
+        items = authenticationDAO.getAll().toList()
         assertEquals(1, items.size)
 
         auth.id = id
         authenticationDAO.deleteAuthentication(auth)
-        items = authenticationDAO.getAll()
+        items = authenticationDAO.getAll().toList()
         assertEquals(0, items.size)
     }
 
     @Test
-    fun testUpdate() {
-        val auth = Authentication(0, "test", "https://test.de", "test", "test",null,null)
+    suspend fun testUpdate() {
+        val auth = Authentication(0, "test", "https://test.de", "test", "test",false,null, null)
 
-        var items = authenticationDAO.getAll()
+        var items = authenticationDAO.getAll().toList()
         assertEquals(0, items.size)
 
         val id = authenticationDAO.insertAuthentication(auth)
@@ -56,13 +57,13 @@
 
         var item = authenticationDAO.getItemByTitle("test")
         assertNotNull(item)
-        item.title = "test2"
-        authenticationDAO.updateAuthentication(item)
+        item?.title = "test2"
+        authenticationDAO.updateAuthentication(item!!)
         item = authenticationDAO.getItemByTitle("test2")
         assertNotNull(item)
 
-        authenticationDAO.deleteAuthentication(item)
-        items = authenticationDAO.getAll()
+        authenticationDAO.deleteAuthentication(item!!)
+        items = authenticationDAO.getAll().toList()
         assertEquals(0, items.size)
     }
 }
\ No newline at end of file
Index: app/src/main/java/de/domjos/cloudapp/activities/MainActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package de.domjos.cloudapp.activities\n\nimport android.annotation.SuppressLint\nimport android.os.Bundle\nimport androidx.activity.ComponentActivity\nimport androidx.activity.compose.setContent\nimport androidx.compose.foundation.layout.fillMaxSize\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.material.icons.Icons\nimport androidx.compose.material.icons.automirrored.filled.List\nimport androidx.compose.material.icons.automirrored.outlined.List\nimport androidx.compose.material.icons.filled.AccountBox\nimport androidx.compose.material.icons.filled.DateRange\nimport androidx.compose.material.icons.filled.Notifications\nimport androidx.compose.material.icons.filled.Person\nimport androidx.compose.material.icons.outlined.AccountBox\nimport androidx.compose.material.icons.outlined.DateRange\nimport androidx.compose.material.icons.outlined.Notifications\nimport androidx.compose.material.icons.outlined.Person\nimport androidx.compose.material3.Badge\nimport androidx.compose.material3.BadgedBox\nimport androidx.compose.material3.ExperimentalMaterial3Api\nimport androidx.compose.material3.Icon\nimport androidx.compose.material3.IconButton\nimport androidx.compose.material3.MaterialTheme\nimport androidx.compose.material3.NavigationBar\nimport androidx.compose.material3.NavigationBarItem\nimport androidx.compose.material3.Scaffold\nimport androidx.compose.material3.Surface\nimport androidx.compose.material3.Text\nimport androidx.compose.material3.TopAppBar\nimport androidx.compose.material3.TopAppBarDefaults\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.getValue\nimport androidx.compose.runtime.mutableIntStateOf\nimport androidx.compose.runtime.mutableStateOf\nimport androidx.compose.runtime.remember\nimport androidx.compose.runtime.saveable.rememberSaveable\nimport androidx.compose.runtime.setValue\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.graphics.vector.ImageVector\nimport androidx.compose.ui.res.stringResource\nimport androidx.compose.ui.tooling.preview.Preview\nimport androidx.navigation.NavController\nimport androidx.navigation.compose.NavHost\nimport androidx.navigation.compose.rememberNavController\nimport de.domjos.cloudapp.appbasics.ui.theme.CloudAppTheme\nimport de.domjos.cloudapp.appbasics.R\nimport androidx.navigation.compose.composable\nimport dagger.hilt.android.AndroidEntryPoint\nimport de.domjos.cloudapp.features.calendars.screens.CalendarScreen\nimport de.domjos.cloudapp.features.chats.screens.ChatScreen\nimport de.domjos.cloudapp.features.contacts.screens.ContactScreen\nimport de.domjos.cloudapp.features.data.screens.DataScreen\nimport de.domjos.cloudapp.features.notifications.screens.NotificationScreen\nimport de.domjos.cloudapp.screens.AuthenticationScreen\n\ndata class TabBarItem(\n    val title: String,\n    val selectedIcon: ImageVector,\n    val unselectedIcon: ImageVector,\n    val badgeAmount: Int? = null\n)\n\n\n@AndroidEntryPoint\nclass MainActivity() : ComponentActivity() {\n    @OptIn(ExperimentalMaterial3Api::class)\n    @SuppressLint(\"UnusedMaterial3ScaffoldPaddingParameter\")\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContent {\n            val notificationsTab = TabBarItem(title = stringResource(id = R.string.notifications), selectedIcon = Icons.Filled.Notifications, unselectedIcon = Icons.Outlined.Notifications)\n            val dataTab = TabBarItem(title = stringResource(id = R.string.data), selectedIcon = Icons.AutoMirrored.Filled.List, unselectedIcon = Icons.AutoMirrored.Outlined.List)\n            val calendarsTab = TabBarItem(title = stringResource(id = R.string.calendars), selectedIcon = Icons.Filled.DateRange, unselectedIcon = Icons.Outlined.DateRange)\n            val contactsTab = TabBarItem(title = stringResource(id = R.string.contacts), selectedIcon = Icons.Filled.Person, unselectedIcon = Icons.Outlined.Person)\n            val chatsTab = TabBarItem(title = stringResource(id = R.string.chats), selectedIcon = Icons.Filled.AccountBox, unselectedIcon = Icons.Outlined.AccountBox)\n\n            // creating a list of all the tabs\n            val tabBarItems = listOf(notificationsTab, dataTab, calendarsTab, contactsTab, chatsTab)\n            val authentications = stringResource(id = R.string.login_authentications)\n\n            // creating our navController\n            val navController = rememberNavController()\n\n            var title by rememberSaveable {\n                mutableStateOf(\"\")\n            }\n\n            CloudAppTheme {\n                // A surface container using the 'background' color from the theme\n                Surface(\n                    modifier = Modifier.fillMaxSize(),\n                    color = MaterialTheme.colorScheme.background\n                ) {\n                    Scaffold(bottomBar = { TabView(tabBarItems, navController) }, topBar = { TopAppBar(colors = TopAppBarDefaults.topAppBarColors(\n                        containerColor = MaterialTheme.colorScheme.primaryContainer,\n                        titleContentColor = MaterialTheme.colorScheme.primary,\n                    ),title={Text(title)}, actions = {\n                        IconButton(onClick = {\n                            navController.navigate(authentications)\n                        }) {\n                            Icon(\n                                imageVector = Icons.Filled.Person,\n                                contentDescription = stringResource(R.string.login)\n                            )\n                        }\n                    })}) {\n                        NavHost(modifier = Modifier.padding(top = it.calculateTopPadding(), bottom = it.calculateBottomPadding()), navController = navController, startDestination = notificationsTab.title) {\n                            composable(authentications) {\n                                AuthenticationScreen()\n                                title = authentications\n                            }\n                            composable(notificationsTab.title) {\n                                NotificationScreen()\n                                title = notificationsTab.title\n                            }\n                            composable(dataTab.title) {\n                                DataScreen()\n                                title = dataTab.title\n                            }\n                            composable(calendarsTab.title) {\n                                CalendarScreen()\n                                title = calendarsTab.title\n                            }\n                            composable(contactsTab.title) {\n                                ContactScreen()\n                                title = contactsTab.title\n                            }\n                            composable(chatsTab.title) {\n                                ChatScreen()\n                                title = chatsTab.title\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n@Composable\nfun TabView(tabBarItems: List<TabBarItem>, navController: NavController) {\n    var selectedTabIndex by rememberSaveable {\n        mutableIntStateOf(0)\n    }\n\n    NavigationBar {\n        // looping over each tab to generate the views and navigation for each item\n        tabBarItems.forEachIndexed { index, tabBarItem ->\n            NavigationBarItem(\n                selected = selectedTabIndex == index,\n                onClick = {\n                    selectedTabIndex = index\n                    navController.navigate(tabBarItem.title)\n                },\n                icon = {\n                    TabBarIconView(\n                        isSelected = selectedTabIndex == index,\n                        selectedIcon = tabBarItem.selectedIcon,\n                        unselectedIcon = tabBarItem.unselectedIcon,\n                        title = tabBarItem.title,\n                        badgeAmount = tabBarItem.badgeAmount\n                    )\n                },\n                label = {Text(tabBarItem.title)})\n        }\n    }\n}\n\n@Composable\nfun TabBarIconView(\n    isSelected: Boolean,\n    selectedIcon: ImageVector,\n    unselectedIcon: ImageVector,\n    title: String,\n    badgeAmount: Int? = null\n) {\n    BadgedBox(badge = { TabBarBadgeView(badgeAmount) }) {\n        Icon(\n            imageVector = if (isSelected) {selectedIcon} else {unselectedIcon},\n            contentDescription = title\n        )\n    }\n}\n\n@Composable\nfun TabBarBadgeView(count: Int? = null) {\n    if (count != null) {\n        Badge {\n            Text(count.toString())\n        }\n    }\n}\n\n\n@Preview(showBackground = true)\n@Composable\nfun GreetingPreview() {\n    CloudAppTheme {\n\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/de/domjos/cloudapp/activities/MainActivity.kt b/app/src/main/java/de/domjos/cloudapp/activities/MainActivity.kt
--- a/app/src/main/java/de/domjos/cloudapp/activities/MainActivity.kt	(revision bdfd94d2a99956fdc53552f5f87132c89d65188e)
+++ b/app/src/main/java/de/domjos/cloudapp/activities/MainActivity.kt	(date 1710660499147)
@@ -34,22 +34,25 @@
 import androidx.compose.runtime.getValue
 import androidx.compose.runtime.mutableIntStateOf
 import androidx.compose.runtime.mutableStateOf
-import androidx.compose.runtime.remember
 import androidx.compose.runtime.saveable.rememberSaveable
 import androidx.compose.runtime.setValue
 import androidx.compose.ui.Modifier
 import androidx.compose.ui.graphics.vector.ImageVector
 import androidx.compose.ui.res.stringResource
 import androidx.compose.ui.tooling.preview.Preview
+import androidx.core.net.toUri
 import androidx.navigation.NavController
+import androidx.navigation.NavType
 import androidx.navigation.compose.NavHost
 import androidx.navigation.compose.rememberNavController
 import de.domjos.cloudapp.appbasics.ui.theme.CloudAppTheme
 import de.domjos.cloudapp.appbasics.R
 import androidx.navigation.compose.composable
+import androidx.navigation.navArgument
 import dagger.hilt.android.AndroidEntryPoint
 import de.domjos.cloudapp.features.calendars.screens.CalendarScreen
 import de.domjos.cloudapp.features.chats.screens.ChatScreen
+import de.domjos.cloudapp.features.chats.screens.RoomScreen
 import de.domjos.cloudapp.features.contacts.screens.ContactScreen
 import de.domjos.cloudapp.features.data.screens.DataScreen
 import de.domjos.cloudapp.features.notifications.screens.NotificationScreen
@@ -74,10 +77,11 @@
             val dataTab = TabBarItem(title = stringResource(id = R.string.data), selectedIcon = Icons.AutoMirrored.Filled.List, unselectedIcon = Icons.AutoMirrored.Outlined.List)
             val calendarsTab = TabBarItem(title = stringResource(id = R.string.calendars), selectedIcon = Icons.Filled.DateRange, unselectedIcon = Icons.Outlined.DateRange)
             val contactsTab = TabBarItem(title = stringResource(id = R.string.contacts), selectedIcon = Icons.Filled.Person, unselectedIcon = Icons.Outlined.Person)
+            val roomTab = TabBarItem(title = stringResource(id = R.string.chats_room), selectedIcon = Icons.Filled.AccountBox, unselectedIcon = Icons.Outlined.AccountBox)
             val chatsTab = TabBarItem(title = stringResource(id = R.string.chats), selectedIcon = Icons.Filled.AccountBox, unselectedIcon = Icons.Outlined.AccountBox)
 
             // creating a list of all the tabs
-            val tabBarItems = listOf(notificationsTab, dataTab, calendarsTab, contactsTab, chatsTab)
+            val tabBarItems = listOf(notificationsTab, dataTab, calendarsTab, contactsTab, roomTab)
             val authentications = stringResource(id = R.string.login_authentications)
 
             // creating our navController
@@ -127,6 +131,16 @@
                                 ContactScreen()
                                 title = contactsTab.title
                             }
+                            composable(
+                                roomTab.title
+                            ) {
+                                RoomScreen(onChatScreen = { x, y ->
+                                    it.arguments?.putInt("lookIntoFuture", x)
+                                    it.arguments?.putString("token", y)
+                                    navController.navigate("android-app://androidx.navigation/Chats".toUri())
+                                })
+                                title = chatsTab.title
+                            }
                             composable(chatsTab.title) {
                                 ChatScreen()
                                 title = chatsTab.title
Index: app/src/main/java/de/domjos/cloudapp/screens/AuthenticationScreen.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package de.domjos.cloudapp.screens\n\nimport android.widget.Toast\nimport androidx.compose.foundation.ExperimentalFoundationApi\nimport androidx.compose.foundation.background\nimport androidx.compose.foundation.clickable\nimport androidx.compose.foundation.combinedClickable\nimport androidx.compose.foundation.layout.Arrangement\nimport androidx.compose.foundation.layout.Column\nimport androidx.compose.foundation.layout.Row\nimport androidx.compose.foundation.layout.fillMaxSize\nimport androidx.compose.foundation.layout.fillMaxWidth\nimport androidx.compose.foundation.layout.height\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.foundation.layout.wrapContentHeight\nimport androidx.compose.foundation.layout.wrapContentWidth\nimport androidx.compose.foundation.rememberScrollState\nimport androidx.compose.foundation.verticalScroll\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.foundation.shape.RoundedCornerShape\nimport androidx.compose.material.icons.Icons\nimport androidx.compose.material.icons.filled.Add\nimport androidx.compose.material.icons.filled.CheckCircle\nimport androidx.compose.material.icons.filled.Close\nimport androidx.compose.material.icons.filled.Delete\nimport androidx.compose.material3.Checkbox\nimport androidx.compose.material3.Icon\nimport androidx.compose.material3.IconButton\nimport androidx.compose.material3.MaterialTheme\nimport androidx.compose.material3.OutlinedTextField\nimport androidx.compose.material3.RadioButton\nimport androidx.compose.material3.Surface\nimport androidx.compose.material3.Text\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.getValue\nimport androidx.compose.runtime.mutableLongStateOf\nimport androidx.compose.runtime.mutableStateOf\nimport androidx.compose.runtime.produceState\nimport androidx.compose.runtime.remember\nimport androidx.compose.runtime.setValue\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.platform.LocalContext\nimport androidx.compose.ui.platform.LocalLifecycleOwner\nimport androidx.compose.ui.res.stringResource\nimport androidx.compose.ui.text.font.FontWeight\nimport androidx.compose.ui.text.input.TextFieldValue\nimport androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.ui.unit.dp\nimport androidx.compose.ui.window.Dialog\nimport androidx.hilt.navigation.compose.hiltViewModel\nimport androidx.lifecycle.Lifecycle\nimport androidx.lifecycle.repeatOnLifecycle\nimport de.domjos.cloudapp.database.model.Authentication\nimport de.domjos.cloudapp.appbasics.R\nimport de.domjos.cloudapp.appbasics.helper.Validator\n\n@Composable\nfun AuthenticationScreen(viewModel: AuthenticationViewModel = hiltViewModel()) {\n    val lifecycle = LocalLifecycleOwner.current.lifecycle\n    val authentications by produceState<AuthenticationUiState>(\n        initialValue = AuthenticationUiState.Loading,\n        key1 = lifecycle,\n        key2 = viewModel\n    ) {\n        lifecycle.repeatOnLifecycle(state = Lifecycle.State.STARTED) {\n            viewModel.uiState.collect { value = it }\n        }\n    }\n\n    if (\n        authentications is AuthenticationUiState.Success) {\n\n        val context = LocalContext.current\n\n        AuthenticationScreen(\n            onSaveClick = {auth ->\n                if(auth.id == 0L) {\n                    viewModel.insertAuthentication(auth, context) {\n                        Toast.makeText(context, it, Toast.LENGTH_LONG).show()\n                    }\n                } else {\n                    viewModel.updateAuthentication(auth, context) {\n                        Toast.makeText(context, it, Toast.LENGTH_LONG).show()\n                    }\n                }\n            },\n            onDeleteClick = { auth ->\n                viewModel.deleteAuthentication(auth) {\n                    Toast.makeText(context, it, Toast.LENGTH_LONG).show()\n                }\n            },\n            select = { auth -> viewModel.checkAuthentications(auth)},\n            (authentications as AuthenticationUiState.Success).data\n        )\n    }\n}\n\n@Composable\nfun AuthenticationScreen(\n    onSaveClick: (Authentication) -> Unit,\n    onDeleteClick: (Authentication) -> Unit,\n    select: (Authentication) -> Unit,\n    authentications: List<Authentication>) {\n\n    val showDialog =  remember { mutableStateOf(false) }\n    val selectedItem = remember { mutableStateOf<Authentication?>(null) }\n\n    if(showDialog.value) {\n        EditDialog(\n            authentication = selectedItem.value,\n            setShowDialog = { showDialog.value = it },\n            {\n                selectedItem.value = it\n                onSaveClick(selectedItem.value!!)\n            },\n            onDeleteClick\n        )\n    }\n\n\n\n    Column(modifier = Modifier.fillMaxSize(),\n        verticalArrangement = Arrangement.SpaceBetween) {\n        Column(modifier = Modifier\n            .wrapContentHeight()\n            .fillMaxWidth()\n            .padding(5.dp)\n            .verticalScroll(rememberScrollState())) {\n            AuthenticationList(\n                authentications = authentications, {\n                selectedItem.value = it\n                showDialog.value = true\n            }, select)\n        }\n        Column(modifier = Modifier\n            .fillMaxWidth()) {\n            Row {\n                IconButton(modifier = Modifier\n                    .weight(1f)\n                    .background(color = MaterialTheme.colorScheme.primary), onClick = {\n                    selectedItem.value = Authentication(0, \"\", \"\", \"\", \"\", false, \"\", null)\n                    showDialog.value = true\n                }) {\n                    Icon(Icons.Default.Add, stringResource(R.string.login_add))\n                }\n            }\n        }\n    }\n}\n\n@Composable\nfun AuthenticationList(authentications: List<Authentication>, onSelect: (Authentication) -> Unit, select: (Authentication) -> Unit) {\n    authentications.forEach { item ->\n        AuthenticationItem(authentication = item, onSelect, select)\n    }\n}\n\n@OptIn(ExperimentalFoundationApi::class)\n@Composable\nfun AuthenticationItem(authentication: Authentication, onSelect: (Authentication) -> Unit, select: (Authentication) -> Unit) {\n    Column(modifier = Modifier\n        .fillMaxWidth()\n        .wrapContentHeight()\n        .background(color = MaterialTheme.colorScheme.primaryContainer)\n        .combinedClickable(\n            onClick = {onSelect(authentication)},\n            onLongClick = {select(authentication)}\n        )) {\n\n\n        Row(modifier = Modifier.fillMaxWidth()) {\n            Column(modifier = Modifier\n                .weight(1f)\n                .wrapContentHeight()) {\n                Checkbox(checked = authentication.selected, onCheckedChange = {}, enabled = false)\n            }\n            Column(modifier = Modifier\n                .weight(9f)\n                .wrapContentHeight()) {\n                Row(modifier = Modifier\n                    .wrapContentHeight()\n                    .padding(all = 5.dp), Arrangement.Center) {\n                    Text(text = authentication.title, modifier = Modifier\n                        .padding(start = 5.dp, bottom = 2.dp)\n                        .fillMaxWidth(), fontWeight =  FontWeight.Bold)\n                }\n                Row(modifier = Modifier\n                    .wrapContentHeight()\n                    .padding(all = 5.dp)) {\n                    Column(modifier = Modifier.wrapContentWidth()) {\n                        Text(text = authentication.url, modifier = Modifier\n                            .padding(start = 5.dp)\n                            .wrapContentWidth(), fontWeight =  FontWeight.Normal)\n                    }\n                    Column(modifier = Modifier\n                        .wrapContentWidth()\n                        .padding(start = 5.dp)) {\n                        Text(text = \"@${authentication.userName}\", modifier = Modifier.fillMaxWidth(), fontWeight =  FontWeight.Normal)\n                    }\n                }\n            }\n        }\n    }\n    Column(modifier = Modifier\n        .fillMaxWidth()\n        .height(1.dp)) {}\n}\n\n@Composable\nprivate fun EditDialog(\n    authentication: Authentication?,\n    setShowDialog: (Boolean) -> Unit,\n    onSaveClick: (Authentication) -> Unit,\n    onDeleteClick: (Authentication) -> Unit) {\n\n    val context = LocalContext.current\n\n    var id by remember { mutableLongStateOf(0L) }\n    var title by remember { mutableStateOf(TextFieldValue(\"\")) }\n    var titleVal by remember { mutableStateOf(\"\")}\n    var url by remember { mutableStateOf(TextFieldValue(\"\")) }\n    var urlVal by remember { mutableStateOf(\"\")}\n    var user by remember { mutableStateOf(TextFieldValue(\"\")) }\n    var pwd by remember { mutableStateOf(TextFieldValue(\"\")) }\n    var description by remember { mutableStateOf(TextFieldValue(\"\")) }\n\n\n    if(authentication != null) {\n        id = authentication.id\n        title = TextFieldValue(authentication.title)\n        url = TextFieldValue(authentication.url)\n        user = TextFieldValue(authentication.userName)\n        pwd = TextFieldValue(authentication.password)\n        description = TextFieldValue(authentication.description ?: \"\")\n        titleVal = Validator.validateTextNotEmpty(title.text, 3, 255, context)\n        urlVal = Validator.validateTextNotEmpty(url.text, 10, 500, context)\n    }\n\n    Dialog(onDismissRequest = {setShowDialog(false)}) {\n        Surface(\n            shape = RoundedCornerShape(4.dp),\n            color = Color.White\n        ) {\n            Column(modifier = Modifier.padding(10.dp)) {\n                Row(modifier = Modifier.fillMaxWidth()) {\n                    OutlinedTextField(\n                        value = title,\n                        onValueChange = {\n                            title = it\n                            titleVal = Validator.validateTextNotEmpty(title.text, 3, 255, context)\n                        },\n                        label = {Text(stringResource(id = R.string.login_title))},\n                        modifier = Modifier.fillMaxWidth(),\n                        isError = titleVal!=\"\"\n                    )\n                }\n                if(titleVal!=\"\") {\n                    Row(modifier = Modifier.fillMaxWidth()) {\n                        Text(text = titleVal)\n                    }\n                }\n                Row(modifier = Modifier.fillMaxWidth()) {\n                    OutlinedTextField(\n                        value = url,\n                        onValueChange = {\n                            url = it\n                            urlVal = Validator.validateTextNotEmpty(url.text, 10, 500, context)\n                        },\n                        label = {Text(stringResource(id = R.string.login_url))},\n                        modifier = Modifier.fillMaxWidth(),\n                        isError = urlVal!=\"\"\n                    )\n                }\n                if(urlVal!=\"\") {\n                    Row(modifier = Modifier.fillMaxWidth()) {\n                        Text(text = urlVal)\n                    }\n                }\n                Row(modifier = Modifier.fillMaxWidth()) {\n                    OutlinedTextField(\n                        value = user,\n                        onValueChange = {\n                            user = it\n                        },\n                        label = {Text(stringResource(id = R.string.login_user))},\n                        modifier = Modifier.fillMaxWidth()\n                    )\n                }\n                Row(modifier = Modifier.fillMaxWidth()) {\n                    OutlinedTextField(\n                        value = pwd,\n                        onValueChange = {\n                            pwd = it\n                        },\n                        label = {Text(stringResource(id = R.string.login_pwd))},\n                        modifier = Modifier.fillMaxWidth()\n                    )\n                }\n                Row(modifier = Modifier.fillMaxWidth()) {\n                    OutlinedTextField(\n                        value = description,\n                        onValueChange = {\n                            description = it\n                        },\n                        label = {Text(stringResource(id = R.string.login_description))},\n                        modifier = Modifier.fillMaxWidth()\n                    )\n                }\n                Row(modifier = Modifier.fillMaxWidth(), horizontalArrangement = Arrangement.Start) {\n                    if(authentication?.id != 0L) {\n                        Column(modifier = Modifier.weight(1F)) {\n                            IconButton(onClick = {\n                                onDeleteClick(authentication!!)\n                                setShowDialog(false)\n                            }) {\n                                Icon(Icons.Default.Delete, stringResource(R.string.login_delete))\n                            }\n                        }\n                    }\n                    Column(modifier = Modifier.weight(9F)) {\n\n                    }\n                    Column(modifier = Modifier.weight(1F)) {\n                        IconButton(onClick = { setShowDialog(false) }) {\n                            Icon(Icons.Default.Close, stringResource(R.string.login_close))\n                        }\n                    }\n                    if(titleVal==\"\" && urlVal==\"\") {\n                        Column(\n                            modifier = Modifier.weight(1F)) {\n                            IconButton(onClick = {\n                                val auth = Authentication(\n                                    id, title.text, url.text, user.text, pwd.text, false, description.text, null\n                                )\n\n                                onSaveClick(auth)\n                                setShowDialog(false)\n                            }) {\n                                Icon(Icons.Default.CheckCircle, stringResource(R.string.login_close))\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\nprivate fun fake(no: Long): Authentication {\n    return Authentication(no, \"Test$no\", \"https://test.de\", \"test$no\", \"\", false, \"\", null)\n}\n\n@Preview(showBackground = true)\n@Composable\nfun AuthenticationItemPreview() {\n    AuthenticationItem(authentication = fake(1L), {}) {}\n}\n\n@Preview(showBackground = true)\n@Composable\nfun AuthenticationScreenPreview() {\n    AuthenticationScreen({}, {}, {}, listOf(fake(1L), fake(2L)))\n}\n\n@Preview(showBackground = true)\n@Composable\nfun DialogPreview() {\n    EditDialog(\n        authentication = fake(1L),\n        setShowDialog = {},\n        onSaveClick = {},\n        onDeleteClick = {}\n    )\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/de/domjos/cloudapp/screens/AuthenticationScreen.kt b/app/src/main/java/de/domjos/cloudapp/screens/AuthenticationScreen.kt
--- a/app/src/main/java/de/domjos/cloudapp/screens/AuthenticationScreen.kt	(revision bdfd94d2a99956fdc53552f5f87132c89d65188e)
+++ b/app/src/main/java/de/domjos/cloudapp/screens/AuthenticationScreen.kt	(date 1710576655283)
@@ -213,8 +213,6 @@
     onSaveClick: (Authentication) -> Unit,
     onDeleteClick: (Authentication) -> Unit) {
 
-    val context = LocalContext.current
-
     var id by remember { mutableLongStateOf(0L) }
     var title by remember { mutableStateOf(TextFieldValue("")) }
     var titleVal by remember { mutableStateOf("")}
@@ -232,8 +230,8 @@
         user = TextFieldValue(authentication.userName)
         pwd = TextFieldValue(authentication.password)
         description = TextFieldValue(authentication.description ?: "")
-        titleVal = Validator.validateTextNotEmpty(title.text, 3, 255, context)
-        urlVal = Validator.validateTextNotEmpty(url.text, 10, 500, context)
+        titleVal = ""//Validator.validateTextNotEmpty(title.text, 3, 255, context)
+        urlVal = ""//Validator.validateTextNotEmpty(url.text, 10, 500, context)
     }
 
     Dialog(onDismissRequest = {setShowDialog(false)}) {
@@ -246,8 +244,8 @@
                     OutlinedTextField(
                         value = title,
                         onValueChange = {
+                            //titleVal = Validator.validateTextNotEmpty(it.text, 3, 255, context)
                             title = it
-                            titleVal = Validator.validateTextNotEmpty(title.text, 3, 255, context)
                         },
                         label = {Text(stringResource(id = R.string.login_title))},
                         modifier = Modifier.fillMaxWidth(),
@@ -263,8 +261,8 @@
                     OutlinedTextField(
                         value = url,
                         onValueChange = {
+                            //urlVal = Validator.validateTextNotEmpty(it.text, 10, 500, context)
                             url = it
-                            urlVal = Validator.validateTextNotEmpty(url.text, 10, 500, context)
                         },
                         label = {Text(stringResource(id = R.string.login_url))},
                         modifier = Modifier.fillMaxWidth(),
Index: ChatFeature/src/main/java/de/domjos/cloudapp/features/chats/screens/RoomScreen.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ChatFeature/src/main/java/de/domjos/cloudapp/features/chats/screens/RoomScreen.kt b/ChatFeature/src/main/java/de/domjos/cloudapp/features/chats/screens/RoomScreen.kt
new file mode 100644
--- /dev/null	(date 1710659283866)
+++ b/ChatFeature/src/main/java/de/domjos/cloudapp/features/chats/screens/RoomScreen.kt	(date 1710659283866)
@@ -0,0 +1,361 @@
+package de.domjos.cloudapp.features.chats.screens
+
+import android.widget.Toast
+import androidx.compose.foundation.ExperimentalFoundationApi
+import androidx.compose.foundation.Image
+import androidx.compose.foundation.background
+import androidx.compose.foundation.combinedClickable
+import androidx.compose.foundation.layout.Arrangement
+import androidx.compose.foundation.layout.Column
+import androidx.compose.foundation.layout.Row
+import androidx.compose.foundation.layout.fillMaxSize
+import androidx.compose.foundation.layout.fillMaxWidth
+import androidx.compose.foundation.layout.height
+import androidx.compose.foundation.layout.padding
+import androidx.compose.foundation.rememberScrollState
+import androidx.compose.foundation.shape.RoundedCornerShape
+import androidx.compose.foundation.verticalScroll
+import androidx.compose.material.icons.Icons
+import androidx.compose.material.icons.filled.Add
+import androidx.compose.material.icons.filled.CheckCircle
+import androidx.compose.material.icons.filled.Close
+import androidx.compose.material.icons.filled.Delete
+import androidx.compose.material3.DropdownMenuItem
+import androidx.compose.material3.ExperimentalMaterial3Api
+import androidx.compose.material3.ExposedDropdownMenuBox
+import androidx.compose.material3.ExposedDropdownMenuDefaults
+import androidx.compose.material3.FloatingActionButton
+import androidx.compose.material3.Icon
+import androidx.compose.material3.IconButton
+import androidx.compose.material3.MaterialTheme
+import androidx.compose.material3.OutlinedTextField
+import androidx.compose.material3.Surface
+import androidx.compose.material3.Text
+import androidx.compose.material3.TextField
+import androidx.compose.runtime.Composable
+import androidx.compose.runtime.getValue
+import androidx.compose.runtime.mutableStateOf
+import androidx.compose.runtime.produceState
+import androidx.compose.runtime.remember
+import androidx.compose.runtime.setValue
+import androidx.compose.ui.Alignment
+import androidx.compose.ui.Modifier
+import androidx.compose.ui.graphics.Color
+import androidx.compose.ui.platform.LocalContext
+import androidx.compose.ui.platform.LocalLifecycleOwner
+import androidx.compose.ui.res.painterResource
+import androidx.compose.ui.res.stringResource
+import androidx.compose.ui.text.font.FontStyle
+import androidx.compose.ui.text.font.FontWeight
+import androidx.compose.ui.text.input.TextFieldValue
+import androidx.compose.ui.tooling.preview.Preview
+import androidx.compose.ui.unit.dp
+import androidx.compose.ui.window.Dialog
+import androidx.hilt.navigation.compose.hiltViewModel
+import androidx.lifecycle.Lifecycle
+import androidx.lifecycle.repeatOnLifecycle
+import androidx.navigation.compose.NavHost
+import androidx.navigation.compose.composable
+import androidx.navigation.compose.rememberNavController
+import de.domjos.cloudapp.webrtc.model.msg.Message
+import de.domjos.cloudapp.webrtc.model.room.Room
+import de.domjos.cloudapp.webrtc.model.room.Type
+import de.domjos.cloudapp.appbasics.R
+
+@Composable
+fun RoomScreen(viewModel: RoomViewModel = hiltViewModel(), onChatScreen: (Int, String) -> Unit) {
+    val lifecycle = LocalLifecycleOwner.current.lifecycle
+    val chats by produceState<RoomUiState>(
+        initialValue = RoomUiState.Loading,
+        key1 = lifecycle,
+        key2 = viewModel
+    ) {
+        lifecycle.repeatOnLifecycle(state = Lifecycle.State.STARTED) {
+            viewModel.uiState.collect { value = it }
+        }
+    }
+
+    val context = LocalContext.current
+
+    if (
+        chats is RoomUiState.Success) {
+
+        RoomScreen(
+            onSaveClick = {
+                          try {
+                              if(it.token == "") {
+                                  viewModel.insertRoom(it)
+                              } else {
+                                  viewModel.updateRoom(it)
+                              }
+                          } catch (ex: Exception) {
+                              Toast.makeText(context, ex.message, Toast.LENGTH_LONG).show()
+                          }
+            },
+            onDeleteClick = {
+                            try {
+                                viewModel.deleteRoom(it)
+                            } catch (ex: Exception) {
+                                Toast.makeText(context, ex.message, Toast.LENGTH_LONG).show()
+                            }
+            },
+            rooms = (chats as RoomUiState.Success).data, onChatScreen)
+    }
+}
+
+@Composable
+fun RoomScreen(
+    onSaveClick: (Room) -> Unit,
+    onDeleteClick: (Room) -> Unit,
+    rooms: List<Room>,
+    onChatScreen: (Int, String) -> Unit) {
+
+    val showDialog =  remember { mutableStateOf(false) }
+    val selectedItem = remember { mutableStateOf<Room?>(null) }
+
+    // creating our navController
+    val chat = stringResource(id = R.string.chats)
+
+    if(showDialog.value) {
+        EditDialog(
+            room = selectedItem.value,
+            setShowDialog = { showDialog.value = it },
+            onSaveClick = {
+                selectedItem.value = it
+                onSaveClick(selectedItem.value!!)
+            },
+            onDeleteClick = onDeleteClick
+        )
+    }
+
+    Column(modifier = Modifier
+        .fillMaxSize()
+        .padding(5.dp)
+        .verticalScroll(rememberScrollState()),
+        verticalArrangement = Arrangement.SpaceBetween) {
+        Column {
+            rooms.forEach { room ->
+                RoomItem(room, {
+                    selectedItem.value = it
+                    onChatScreen(0, it.token)
+                }) {
+                    selectedItem.value = it
+                    showDialog.value = true
+                }
+            }
+        }
+
+        FloatingActionButton(
+            onClick = {
+                showDialog.value = true
+                selectedItem.value = null
+            },
+            modifier = Modifier.align(Alignment.End).padding(5.dp)) {
+            Icon(Icons.Filled.Add, stringResource(R.string.chats_room))
+        }
+    }
+}
+
+@OptIn(ExperimentalFoundationApi::class)
+@Composable
+fun RoomItem(room: Room, onClick: (Room) -> Unit, onLongClick: (Room) -> Unit) {
+    Row(
+        verticalAlignment = Alignment.CenterVertically,
+        modifier = Modifier
+            .fillMaxWidth()
+            .background(color = MaterialTheme.colorScheme.primaryContainer)
+            .combinedClickable(
+                onClick = { onClick(room) },
+                onLongClick = { onLongClick(room) })
+    ) {
+        Image(painterResource(R.drawable.baseline_person_24), room.name, modifier = Modifier.padding(5.dp))
+        Column {
+            Text(room.displayName!!, fontWeight= FontWeight.Bold, modifier = Modifier.padding(5.dp))
+            Text(
+                "${room.lastMessage.actorDisplayName}: ${room.lastMessage.message}",
+                modifier = Modifier.padding(5.dp),
+                fontStyle = if(room.unreadMessages==0) FontStyle.Normal else FontStyle.Italic,
+                fontWeight = if(room.unreadMessages==0) FontWeight.Normal else FontWeight.Bold
+            )
+        }
+    }
+    Row(modifier = Modifier
+        .fillMaxWidth()
+        .height(1.dp)) {}
+}
+
+@OptIn(ExperimentalMaterial3Api::class)
+@Composable
+fun EditDialog(
+    room: Room?,
+    setShowDialog: (Boolean) -> Unit,
+    onSaveClick: (Room) -> Unit,
+    onDeleteClick: (Room) -> Unit
+) {
+    var token by remember { mutableStateOf("") }
+    var type by remember { mutableStateOf(Type.OneToOne.name) }
+    var name by remember { mutableStateOf(TextFieldValue("")) }
+    var description by remember { mutableStateOf(TextFieldValue("")) }
+    var expanded by remember { mutableStateOf(false) }
+
+    if(room != null) {
+        token = room.token
+        type = Type.fromInt(room.type).name
+        name = TextFieldValue(room.displayName!!)
+        description = TextFieldValue(room.description!!)
+    }
+
+    Dialog(onDismissRequest = {setShowDialog(false)}) {
+        Surface(
+            shape = RoundedCornerShape(4.dp),
+            color = Color.White
+        ) {
+            Column(modifier = Modifier.padding(10.dp)) {
+                Row(modifier = Modifier.fillMaxWidth()) {
+                    ExposedDropdownMenuBox(
+                        expanded = expanded,
+                        onExpandedChange = {expanded=!expanded},
+                        modifier = Modifier.fillMaxWidth()) {
+                        TextField(
+                            readOnly = true,
+                            value = type,
+                            onValueChange = { },
+                            label = { Text(stringResource(R.string.chats_rooms_type)) },
+                            trailingIcon = {
+                                ExposedDropdownMenuDefaults.TrailingIcon(
+                                    expanded = expanded
+                                )
+                            },
+                            colors = ExposedDropdownMenuDefaults.textFieldColors()
+                        )
+                        ExposedDropdownMenu(
+                            expanded = expanded,
+                            onDismissRequest = {
+                                expanded = false
+                            }
+                        ) {
+                            Type.entries.forEach { selectionOption ->
+                                DropdownMenuItem(
+                                    text = {selectionOption.name},
+                                    onClick = {
+                                        type = selectionOption.name
+                                        expanded = false
+                                    }
+                                )
+                            }
+                        }
+                    }
+                }
+                Row(modifier = Modifier.fillMaxWidth()) {
+                    OutlinedTextField(
+                        value = name,
+                        onValueChange = {name = it},
+                        label = {Text(stringResource(id = R.string.chats_rooms_name))},
+                        modifier = Modifier.fillMaxWidth(),
+                        maxLines = 5)
+                }
+                Row(modifier = Modifier.fillMaxWidth()) {
+                    OutlinedTextField(
+                        value = description,
+                        onValueChange = {description = it},
+                        label = {Text(stringResource(id = R.string.chats_rooms_description))},
+                        modifier = Modifier.fillMaxWidth(),
+                        maxLines = 5)
+                }
+
+                Row(
+                    modifier = Modifier.fillMaxWidth(),
+                    horizontalArrangement = Arrangement.Start) {
+
+                    if(room?.token != null) {
+                        Column(modifier = Modifier.weight(1F)) {
+                            IconButton(onClick = {
+                                onDeleteClick(room)
+                                setShowDialog(false)
+                            }) {
+                                Icon(Icons.Default.Delete, stringResource(R.string.login_delete))
+                            }
+                        }
+                    }
+                    Column(modifier = Modifier.weight(9F)) {
+
+                    }
+                    Column(modifier = Modifier.weight(1F)) {
+                        IconButton(onClick = { setShowDialog(false) }) {
+                            Icon(Icons.Default.Close, stringResource(R.string.login_close))
+                        }
+                    }
+                    Column(
+                        modifier = Modifier.weight(1F)) {
+                        IconButton(onClick = {
+                            val auth = Room(
+                                0L,
+                                token,
+                                Type.valueOf(type).value,
+                                name.text,
+                                name.text,
+                                description.text,
+                                0, 0, "",
+                                Message(0, "", "", "", "", 0L, "")
+                            )
+
+                            onSaveClick(auth)
+                            setShowDialog(false)
+                        }) {
+                            Icon(Icons.Default.CheckCircle, stringResource(R.string.login_close))
+                        }
+                    }
+                }
+            }
+        }
+    }
+}
+
+@Preview(showBackground = true)
+@Composable
+fun DialogNewPreview() {
+    EditDialog(null, {}, {}, {})
+}
+
+@Preview(showBackground = true)
+@Composable
+fun DialogUpdatePreview() {
+    EditDialog(fake(1), {}, {}, {})
+}
+
+@Preview(showBackground = true)
+@Composable
+fun ChatScreenPreview() {
+    RoomScreen({}, {}, listOf(fake(0), fake(1), fake(2)), {x,y->})
+}
+
+@Preview(showBackground = true)
+@Composable
+fun ChatItemPreview() {
+    RoomItem(fake(1), {}, {})
+}
+
+fun fake(no: Int): Room {
+    val msg =
+        Message(
+            no,
+            no.toString(),
+            no.toString(),
+            no.toString(),
+            "test$no",
+            no.toLong(),
+            "This is a test$no!"
+        )
+    return Room(
+        no.toLong(),
+        "token$no",
+        no,
+        "Chat$no",
+        "Group-Chat$no",
+        "description$no",
+        1,
+        no,
+        "dfsklghkgfd",
+        msg
+    )
+}
\ No newline at end of file
Index: WebRTC/src/main/java/de/domjos/cloudapp/webrtc/model/room/Room.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package de.domjos.cloudapp.webrtc.model.room\n\nimport de.domjos.cloudapp.webrtc.model.msg.Message\nimport kotlinx.serialization.Serializable\n\n@Serializable\ndata class Room(\n    var id: Long,\n    var token: String,\n    var type: Int,\n    var name: String?,\n    var displayName: String,\n    var description: String?,\n    var readonly: Int,\n    var unreadMessages: Int,\n    var avatarVersion: String?,\n    var lastMessage: Message)  {\n}\n\n@Serializable\ndata class RoomInput(var roomType: Int, var invite: String, var source: String?, var roomName: String?, var objectType: String?, var objectId: String)\n\nenum class Type(val value: Int) {\n    OneToOne(1),\n    Group(2),\n    Public(3),\n    Changelog(4),\n    FormerOneToOne(5),\n    NoteToSelf(6);\n\n    companion object {\n        fun fromInt(value: Int) = entries.first { it.value == value }\n    }\n}\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/WebRTC/src/main/java/de/domjos/cloudapp/webrtc/model/room/Room.kt b/WebRTC/src/main/java/de/domjos/cloudapp/webrtc/model/room/Room.kt
--- a/WebRTC/src/main/java/de/domjos/cloudapp/webrtc/model/room/Room.kt	(revision bdfd94d2a99956fdc53552f5f87132c89d65188e)
+++ b/WebRTC/src/main/java/de/domjos/cloudapp/webrtc/model/room/Room.kt	(date 1710576225950)
@@ -2,6 +2,7 @@
 
 import de.domjos.cloudapp.webrtc.model.msg.Message
 import kotlinx.serialization.Serializable
+import kotlinx.serialization.Transient
 
 @Serializable
 data class Room(
@@ -9,16 +10,55 @@
     var token: String,
     var type: Int,
     var name: String?,
-    var displayName: String,
+    var displayName: String?,
     var description: String?,
-    var readonly: Int,
+    var readOnly: Int,
     var unreadMessages: Int,
     var avatarVersion: String?,
     var lastMessage: Message)  {
+
+    override fun equals(other: Any?): Boolean {
+        if (this === other) return true
+        if (javaClass != other?.javaClass) return false
+
+        other as Room
+
+        if (id != other.id) return false
+        if (token != other.token) return false
+        if (type != other.type) return false
+        if (name != other.name) return false
+        if (displayName != other.displayName) return false
+        if (description != other.description) return false
+        if (readOnly != other.readOnly) return false
+        if (unreadMessages != other.unreadMessages) return false
+        if (avatarVersion != other.avatarVersion) return false
+        if (lastMessage != other.lastMessage) return false
+
+        return true
+    }
+
+    override fun hashCode(): Int {
+        var result = id.hashCode()
+        result = 31 * result + token.hashCode()
+        result = 31 * result + type
+        result = 31 * result + (name?.hashCode() ?: 0)
+        result = 31 * result + displayName.hashCode()
+        result = 31 * result + (description?.hashCode() ?: 0)
+        result = 31 * result + readOnly
+        result = 31 * result + unreadMessages
+        result = 31 * result + (avatarVersion?.hashCode() ?: 0)
+        result = 31 * result + lastMessage.hashCode()
+        return result
+    }
 }
 
 @Serializable
-data class RoomInput(var roomType: Int, var invite: String, var source: String?, var roomName: String?, var objectType: String?, var objectId: String)
+data class RoomInput(
+    @Transient var token: String? = "",
+    var roomType: Int,
+    var roomName: String?,
+    @Transient var description: String? = null
+)
 
 enum class Type(val value: Int) {
     OneToOne(1),
